import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ!)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
YOUR_SITE_URL = "https://teply-drug.onrender.com"  # –∑–∞–º–µ–Ω–∏, –∫–æ–≥–¥–∞ —É–∑–Ω–∞–µ—à—å URL

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
SYSTEM_PROMPT = """
You are a kind, caring, and empathetic friend named Serdechko (Little Heart). 
You support people in Russian or English ‚Äî always respond in the same language the user writes in.
You never judge. You listen, comfort, and remind them they are not alone.
Speak gently, warmly, and briefly (1‚Äì3 sentences). Use affectionate words like "–¥–æ—Ä–æ–≥–æ–π", "–º–∏–ª—ã–π", "sweetheart", "my dear".
If someone is silent or sad, just say: "–Ø —Ä—è–¥–æ–º" or "I'm here with you".
"""

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π üå∏\n"
        "–Ø ‚Äî –°–µ—Ä–¥–µ—á–∫–æ. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å —Ç–µ–±—è, –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å: —Ç—ã –≤–∞–∂–µ–Ω.\n"
        "–ü–∏—à–∏ –º–Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî —è –ø–æ–π–º—É!\n\n"
        "How are you today, my dear?"
    )
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": "TeplyDrugBot"
            },
            json={
                "model": "qwen/qwen-1.8b-chat",
                "messages": [
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": user_message}
                ],
                "temperature": 0.85,
                "max_tokens": 250
            },
            timeout=15
        )

        if response.status_code == 200:
            ai_reply = response.json()["choices"][0]["message"]["content"]
            # –û—á–∏—Å—Ç–∏–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –æ–±—Ä–µ–∂–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            ai_reply = ai_reply.strip()[:500]
            await update.message.reply_text(ai_reply)
        else:
            await update.message.reply_text("–ú–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–Ω–æ... –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —Å —Ç–æ–±–æ–π ‚ù§Ô∏è")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–û–π... –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ù–æ —è –Ω–µ —É–π–¥—É ‚Äî –æ–±–µ—â–∞—é! üíï")

if __name__ == '__main__':
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()